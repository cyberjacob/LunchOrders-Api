/*
 * Lunch Orders
 *
 * This API allows lunch ordering.
 *
 * API version: 1.0.0
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */

package order

import (
	"fmt"
	"github.com/cuvva/ksuid"
	"github.com/cyberjacob/LunchOrders-Api/models"
	"github.com/gin-gonic/gin"
	"net/http"
)

const OrderTypeKey = "Order"

func SetupOrderRoutes(router *gin.RouterGroup) {
	router.GET("", GetOrders)
	router.POST("", AddOrder)

	router.GET("/:id/", GetOrderById)
	router.DELETE("/:id/", DeleteOrder)
	router.PUT("/:id/", UpdateOrder)
}

func AddOrder(c *gin.Context) {
	var order models.Order

	if errA := c.ShouldBind(&order); errA != nil {
		c.AbortWithError(http.StatusBadRequest, errA)
		return
	}

	order.Id = ksuid.Generate(OrderTypeKey)
	order.Status = models.Pending
	order.From = "Unknown User"

	models.Db.Save(&order)
	c.JSON(http.StatusCreated, order)
}

func DeleteOrder(c *gin.Context) {
	rawId := c.Param("id")
	id := ksuid.MustParse(rawId)

	if id.Resource != OrderTypeKey {
		c.AbortWithStatus(http.StatusBadRequest)
		return
	}

	models.Db.Delete(models.Order{Id: id})

	c.Status(http.StatusOK)
}

func GetOrderById(c *gin.Context) {
	rawId := c.Param("id")
	id := ksuid.MustParse(rawId)

	if id.Resource != OrderTypeKey {
		c.AbortWithStatus(http.StatusBadRequest)
		return
	}

	var order models.Order
	models.Db.Find(&order, models.Order{Id: id})
}

func GetOrders(c *gin.Context) {
	var orders []models.Order
	if err := models.Db.Find(&orders).Error; err != nil {
		c.AbortWithStatus(404)
		fmt.Println(err)
	} else {
		c.JSON(200, orders)
	}
}

func UpdateOrder(c *gin.Context) {
	var order models.Order
	c.Bind(&order)

	id := ksuid.MustParse(c.Param("id"))

	if id.Resource != OrderTypeKey {
		c.AbortWithStatus(http.StatusBadRequest)
		return
	}

	order.Id = id
	models.Db.Save(order)
}
